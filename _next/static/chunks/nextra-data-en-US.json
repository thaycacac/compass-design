{"/":{"title":"Get Started","data":{"":"","what-is-react-compass#What is React Compass?":"React Compass is a library of React components that follows the ARIA Authoring Practices Guide.At the moment, React Compass only supports NextJS.","quick-start-with-nextjs#Quick Start with Next.js":"Install the library\n\n\n\n\nnpm i @comfortdelgro/react-compass\n\n\n\nyarn add @comfortdelgro/react-compass\n\n\n\npnpm add @comfortdelgro/react-compass\n\n\n\nAdd preflight flushing styles for SSR.\n\n\nimport Preflight from '@comfortdelgro/react-compass/preflight'\nimport Document, {\nDocumentContext,\nHead,\nHtml,\nMain,\nNextScript,\n} from 'next/document'\n\nclass MyDocument extends Document {\nstatic async getInitialProps(ctx: DocumentContext) {\nconst initialProps = await Document.getInitialProps(ctx)\nreturn {\n...initialProps,\nstyles: <>{initialProps.styles}</>,\n}\n}\n\nrender() {\nreturn (\n<Html>\n<Head>{Preflight.flush()}</Head>\n<body>\n<Main />\n<NextScript />\n</body>\n</Html>\n)\n}\n}\n\nexport default MyDocument\n\nAdd Preflight component for better CSS resets according to design guidelines.\n\n\nimport Preflight from '@comfortdelgro/react-compass/preflight'\nimport {AppProps} from 'next/app'\n\nconst App: React.FC<AppProps> = ({Component, pageProps}) => {\nreturn (\n<>\n<Preflight />\n<Component {...pageProps} />\n</>\n)\n}\n\nexport default App\n\nYou are good to go!\n\n\nYou can opt out of step 3 but we'd recommend not to."}},"/components/alerts":{"title":"Alerts","data":{"":"Alerts provide short, timely, and relevant information for your users without interrupting their tasks.","import#Import:":"import {Alert} from '@comfortdelgro/react-compass'\nor\nimport Alert from '@comfortdelgro/react-compass/alert'","basic-alerts#Basic alerts:":"This is an info alert — check it out!\n\n\nThis is a sucess alert — check it out!\n\n\nThis is a danger alert — check it out!\n\n\nThis is a warning alert — check it out!\n\n\n<Alert color='info'> This is an info alert — check it out! </Alert>\n\n<Alert color='success'> This is a sucess alert — check it out! </Alert>\n\n<Alert color='danger'> This is a danger alert — check it out! </Alert>\n\n<Alert color='warning'> This is a warning alert — check it out! </Alert>","dismissible#Dismissible:":"This is an info alert — check it out!\n\n\n<Alert color='info' dismissible onDismiss={() => {}}>\nThis is an info alert — check it out!\n</Alert>","transition#Transition:":"You can use a transition component such as AnimatePresence and motion to transition the appearance of the alert.Click ladle to see this in action.\nconst MotionAlert = motion(Alert)\n\nexport const Dismissible: React.FC = () => {\nconst [alerts, setAlerts] = useState([\n{color: 'info' as const, key: 'info'},\n{color: 'success' as const, key: 'success'},\n{color: 'danger' as const, key: 'danger'},\n])\n\nconst removeAlert = (key: string) =>\nsetAlerts((alerts) => alerts.filter((alert) => alert.key !== key))\n\nreturn (\n<Column>\n<AnimatePresence mode='popLayout'>\n{alerts.map((alert) => (\n<MotionAlert\nkey={alert.key}\ncolor={alert.color}\ndismissible\nonDismiss={() => removeAlert(alert.key)}\n// motion\nlayout\nanimate={{x: 0, opacity: 1}}\nexit={{x: -20, opacity: 0}}\ntransition={{duration: 0.2}}\n>\n<AlertContent />\n</MotionAlert>\n))}\n</AnimatePresence>\n</Column>\n)\n}","icons#Icons:":"The icon prop allows you to add an icon to the beginning of the alert component. This will override the default icon for the specified severity.\n\nThis is a success alert — check it out!\n\n\n<Alert color='success' icon={faChessKing}>\nThis is a success alert — check it out!\n</Alert>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nThis is a success alert — check it out!\n\n\n<Alert\ncolor='success'\ncss={{backgroundColor: 'orange', '&:hover': {backgroundColor: 'red'}}}\n>\nThis is a success alert — check it out!\n</Alert>","props#Props:":"Name\tType\tDefault\tDescription\tchildren\tReactNode |String\t—\tThe content to display in the alerts.\tdismissible\tboolean\tfalse\tIf true, show the close icon.\tonDismiss\tfunction\t—\tCallback to close the alerts.\ticon\tIconProp | false\t—\tThe icon of the alerts. It'd disappear if the value is false.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/avatars":{"title":"Avatars","data":{"":"Avatars can be used in everything including a person's profile picture, dialog menu, ext.","import#Import:":"import {Avatar} from '@comfortdelgro/react-compass'\nor\nimport Avatar from '@comfortdelgro/react-compass/avatar'","image-avatars#Image avatars:":"<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=32'\nsize='lg'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=31'\nsize='lg'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=60'\nsize='lg'\n/>","letter-avatars#Letter avatars:":"<Avatar label='Albert Einstein' size='lg' />\n\n<Avatar label='Adam Levine' size='lg' />\n\n<Avatar label='Dwane Johnson' size='lg' />","sizes#Sizes:":"<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=32'\nsize='xs'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=31'\nsize='sm'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=60'\nsize='md'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e29026704d'\nsize='lg'\n/>","icon-avatars#Icon avatars:":"<Avatar label='Albert Einstein' icon={faRegularUser} size='lg' />","grouped#Grouped":"<Avatar.Group display={3}>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e29026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0581f4e29d026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e429026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e42239026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0425e81f4234e429026704d'\nsize='lg'\n/>\n</Avatar.Group>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0425e81423429026704d'\nsize='lg'\ncss={{opacity: '0.8', '&:hover': {opacity: '0.5', cursor: 'pointer'}}}\n/>","props#Props:":"","avatar-#<Avatar/> :":"Name\tType\tDefault\tDescription\tlabel\tString\t—\tThe label, used as fallback for image. The avatars would show the initials of the labels.\timage\tString \t—\tImage of the avatars takes the highest priority. We pass the image's address as string to this prop.\tsize\txs|sm|md|lg\t—\tSizes of the avatars.\ticon\tIconProp|false| true\tfalse\tThe icon of the alerts. It'd disappear if the value is false.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","avatargroup-#<Avatar.Group/> :":"Name\tType\tDefault\tDescription\tchildren\tReactNode | String\t—\tWe pass our avatars as children props to Avatar.Group.\tdisplay\tNumber\t—\tDisplay prop determines the number of avatar displayed.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/badges":{"title":"Badges","data":{"":"Badges can be used to highlight important bits of information such as labels, notifications, data trends & status.","import#Import:":"import {Badge} from '@comfortdelgro/react-compass'\nor\nimport Badge from '@comfortdelgro/react-compass/badge'","basic#Basic:":"<Badge label='Default' />","colors-#Colors :":"<Badge label='Info' color='info' />\n\n<Badge label='Success' color='success' />\n\n<Badge label='Danger' color='danger' />\n\n<Badge label='Warning' color='warning />","variants#Variants:":"<Badge label='Primary' color='danger' variant='primary' />\n<Badge label='Secondary' color='danger' variant='secondary' />\n<Badge label='Outline' color='danger' variant='outline' />","default-icon#Default icon:":"<Badge label='Primary' color='info' variant='primary' icon />\n<Badge label='Success' color='success' variant='primary' icon />\n<Badge label='Secondary' color='danger' variant='secondary' icon />\n<Badge label='Outline' color='warning' variant='outline' icon />","custom-icon#Custom icon:":"<Badge\nlabel='LGTM'\ncolor='success'\nvariant='secondary'\nicon={faThumbsUp}\n/>\n<Badge\nlabel='Practice Social Distancing'\ncolor='danger'\nvariant='outline'\nicon={faVirus}\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Badge\nlabel='Outline'\ncolor='warning'\nvariant='outline'\ncss={{color: 'purple', '&:hover': {backgroundColor: 'grey'}}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tcolor\tinfo | success | warning | danger\tinfo\tThese colors will determine the color of background of the badges.\tlabel\tString \t—\tLable of the badges.\tvariant\tprimary | secondary | outline\tprimary\tVariants will determine the color of the badges' label, border and the darkness of its background .\ticon\tIconProp|false| true\tfalse\tWhen false, no icon is shown in the badge. When true, the default icons are shown. And you can pass in custom icons to this prop.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/breadcrumbs":{"title":"Breadcrumbs","data":{"":"Breadcrumbs consist of a list of links that help a user visualize a page's location within the hierarchical structure of a website, and allow navigation up to any of its \"ancestors\".","import#Import:":"import {Breadcrumbs} from '@comfortdelgro/react-compass'\nor\nimport Breadcrumbs from '@comfortdelgro/react-compass/breadcrumbs'","basic#Basic:":"const isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n\n;<Breadcrumbs isCurrent={isCurrent}>\n<Breadcrumbs.Item href='#0'>Home</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#1'>Library</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#2' isDisabled>\nDisabled\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#3'>Data</Breadcrumbs.Item>\n</Breadcrumbs>","colors-#Colors :":"const isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n;<Breadcrumbs dividerIcon={faVirus} isCurrent={isCurrent}>\n<BreadcrumbItem href='#0'>Home</BreadcrumbItem>\n<BreadcrumbItem href='#1'>Library</BreadcrumbItem>\n<BreadcrumbItem href='#2'>Data</BreadcrumbItem>\n</Breadcrumbs>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\nconst isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n\n;<Breadcrumbs isCurrent={isCurrent}>\n<Breadcrumbs.Item href='#0' css={{'&:hover': {color: 'black'}}}>\nHome\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#1' css={{'&:hover': {color: 'black'}}}>\nLibrary\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#2' css={{'&:hover': {color: 'black'}}}>\nData\n</Breadcrumbs.Item>\n</Breadcrumbs>","props#Props:":"Name\tType\tDefault\tDescription\tisCurrent\t(i:number) => boolean\tfalse\t\tdividerIcon\tIconProp|false| true\t—\n\nCheck out our ladle for more info on\nthis component."}},"/components/buttons":{"title":"Buttons","data":{"":"Buttons allow users to take actions, and make choices, with a single tap.","import#Import:":"import {Button} from '@comfortdelgro/react-compass'\nor\nimport Button from '@comfortdelgro/react-compass/button'","button-variants#Button Variants:":"Primary\n\n\nSecondary\n\n\nDanger\n\n\nGhost\n\n\nDisabled\n\n\n<Button variant='primary'>Primary</Button>\n<Button variant='secondary'>Secondary</Button>\n<Button variant='danger'>Danger</Button>\n<Button variant='ghost'>Ghost</Button>\n<Button isDisabled>Disabled</Button>","buttons-with-left-icons-#Buttons with left icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' leftIcon={faThumbsUp}>\nSecondary\n</Button>\n<Button variant='danger' leftIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' leftIcon={faThumbsUp}>\nGhost\n</Button>","buttons-with-right-icons-#Buttons with right icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' rightIcon={faThumbsUp}>\nSecondary\n</Button>\n<Button variant='danger' rightIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' rightIcon={faThumbsUp}>\nGhost\n</Button>","buttons-with-both-left-and-right-icons-#Buttons with both left and right icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' rightIcon={faThumbsUp} leftIcon={faVirus}>\nSecondary\n</Button>\n<Button variant='danger' rightIcon={faThumbsUp} leftIcon={faVirus}>\nDanger\n</Button>\n<Button variant='ghost' rightIcon={faThumbsUp} leftIcon={faVirus}>\nGhost\n</Button>","buttons-with-icons-as-content#Buttons with icons as content:":"import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\n\n<Button variant='secondary'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>\n<Button variant='danger'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>\n<Button variant='ghost'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>","loading-buttons-#Loading buttons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' loading>\nSecondary\n</Button>\n<Button variant='danger' loading rightIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' loading rightIcon={faThumbsUp}>\nGhost\n</Button>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nDanger\n\n\n<Button\nvariant='danger'\nrightIcon={faThumbsUp}\ncss={{'&:hover': {color: 'grey'}}}\n>\nDanger\n</Button>","props#Props:":"Name\tType\tDefault\tDescription\tcolor\tinfo | success | warning | danger\t\t\trightIcon\tIconProp|false| true\t—\t\tleftIcon\tIconProp|false| true\t\t\tvariant\tprimary | secondary | danger | ghost\t\t\tcss\tCSS\t—\t\tisDisabled\t\t\t\tloading\tfalse| true\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/cards":{"title":"Cards","data":{"":"Cards provide a flexible and extensible content container with multiple variants and options","example#Example":"import {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nreturn (\n<Card size='small'>\n<Card.Body>\n<Card.Title>Card title</Card.Title>\n<p>This is a card paragraph</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard title\n\n\nThis is a card paragraph","content#Content":"","body#Body":"Use <Card.Body> to pad content inside a <Card>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BodyOnlyExample() {\nreturn (\n<Card size='small'>\n<Card.Body>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nThis is a paragraph within a card body","title#Title":"Use <Card.Title> to create a title inside a <Card.Body>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction TitleExample() {\nreturn (\n<Card size='small'>\n<Card.Body>\n<Card.Title>Card title</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard title\n\n\nThis is a paragraph within a card body\n\n\n\nYou can also use a different heading tag inside <Card.Title>\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction H1TitleExample() {\nreturn (\n<Card size='large'>\n<Card.Body>\n<Card.Title>\n<h1>Card title as H1</h1>\n</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\n\nCard title as H1\n\n\nThis is a paragraph within a card body","image#Image":"Use <Card.Image> to embed the image in a card <Card>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction ImageExample() {\nconst imageSrc =\n'https://images.unsplash.com/flagged/photo-1562503542-2a1e6f03b16b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8c2luZ2Fwb3JlfGVufDB8fDB8fA%3D%3D&w=1000&q=80'\n\nreturn (\n<Card size='large'>\n<Card.Image src={imageSrc} />\n<Card.Body>\n<Card.Title>Card with image</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\n\n\nCard with image\n\n\nThis is a paragraph within a card body","sizes#Sizes":"Card comes with different sizes: small, large and full.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nconst sizes = ['small', 'large', 'full']\n\nreturn (\n{sizes.map((size) => (\n<Card size={size}>\n<Card.Body>\n<Card.Title>\nCard with size: {size}\n</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n))}\n);\n}\n\n\nYou can fully customize the card size.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nconst cardSize = '460px'\n\nreturn (\n<Card css={{width: cardSize}}>\n<Card.Body>\n<Card.Title>Card with customized size</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard with customized size\n\nThis is a paragraph within a card body","disabled#Disabled":"Card can be disabled by passing isDisabled prop.\nimport {Card} from '@comfortdelgro/react-compass'\nimport Button from '@comfortdelgro/react-compass/button'\n\nfunction DisabledCard() {\nconst isDisabled = true\nreturn (\n<Card size='small' isDisabled={isDisabled}>\n<Card.Body>\n<Card.Title>Disabled Card</Card.Title>\n<p>This is a paragraph within a card body</p>\n<Button isDisabled={isDisabled} variant='primary'>\nButton\n</Button>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nDisabled Card\n\n\nThis is a paragraph within a card body\n\n\nButton","props#Props":"","card#Card":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card.\tsize\tsmall | large | full\tfull\tThe size of the Card\tisDisabled\tboolean\tfalse\tWhether the card is disabled.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-body#Card Body":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card Image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-title#Card Title":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card Image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-image#Card Image":"Name\tType\tDefault\tDescription\tsrc *\tstring\t—\tThe URL of the image.\talt *\tstring\t—\tText description of the image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles."}},"/components/link":{"title":"Link","data":{"":"The Link component allows you to easily customize anchor elements with your theme colors and typography styles.","import#Import:":"import {Link} from '@comfortdelgro/react-compass'\nor\nimport Link from '@comfortdelgro/react-compass/link'","basic-link#Basic Link:":"Go to another page\n\nGo to Google\n\n\n<Link href='/#page'>Go to another page</Link>\n<Link href='https://google.com' external>\nGo to Google\n</Link>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nGo to Google\n\n\n<Link\nhref='https://google.com'\nexternal\ncss={{textDecoration: 'line-through', '&:hover': {color: 'grey'}}}\n>\nGo to Google\n</Link>","props#Props:":"Name\tType\tDefault\tDescription\texternal\tfalse| true\tfalse\tSet to extinal website when true\tcss\tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/searchField":{"title":"Searchfield","data":{"":"Search Fields let users enter search input.","import#Import:":"import {SearchField} from '@comfortdelgro/react-compass'\nor\nimport SearchField from '@comfortdelgro/react-compass/searchfield'","basic-search-field#Basic Search Field:":"<SearchField placeholder='Search' onSubmit={(text) => console.log(text)} />\n<SearchField\nisDisabled\nplaceholder='Search'\nonSubmit={(text) => console.log(text)}\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<SearchField\nplaceholder='Search'\nonSubmit={(text) => console.log(text)}\ncss={{border: '1px solid gray'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tisDisabled\tfalse| true\t\t\tonSubmit\t(i:string)=>void\t—\t\tcss\tCSS\t—\n\nCheck out our ladle for more info on\nthis component."}},"/components/spinners":{"title":"Spinners","data":{"":"Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.","import#Import:":"import {Spinner} from '@comfortdelgro/react-compass'\nor\nimport Spinner from '@comfortdelgro/react-compass/spinner'","default-circular#Default Circular:":"<Spinner size='2xl' />\n<Spinner size='xl' />\n<Spinner size='lg' />\n<Spinner size='md' />\n<Spinner size='sm' />","circular-without-label#Circular without label:":"<Spinner size='2xl' label={false} />\n<Spinner size='xl' label={false} />\n<Spinner size='lg' label={false} />\n<Spinner size='md' label={false} />\n<Spinner size='sm' label={false} />","circular-with-custom-label#Circular with custom label:":"<Spinner size='2xl' label={'Running...'} />","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Spinner size='2xl' css={{height: '15em'}} />","props#Props:":"Name\tType\tDefault\tDescription\tsize\tsm| md | lg | xl | 2xl\t\t\tlabel\tfalse| true | String\t—\t\tcss\tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/textarea":{"title":"Textarea","data":{"":"Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.","import#Import:":"import {Textarea} from '@comfortdelgro/react-compass'\nor\nimport Textarea from '@comfortdelgro/react-compass/textarea'","basic-text-areas#Basic text areas:":"<Textarea placeholder='Enter your message' />\n<Textarea label='Text Label' placeholder='Enter your message' isDisabled/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nvalue='Lorem ipsum dolor sit amet.'\n/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nvalue={'Lorem ipsum dolor sit amet.'}\nonChange={() => {}}\n/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nerrored\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nerrored\ncss={{height: '10em', width: '50em'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tplaceholder\tstring | null\tnull\tPlaceholder of the text field\tlabel\tstring | null\tnull\tLabel of the text field\terrored\ttrue | false\tfalse\tThrow error when input value is wrong\tvalue\tstring\t—\tInput value\tisDisabled\tfalse| true\tfalse\tDisable the text field when true\tcss \tCSS\t—\t\twordCount\tfalse| true\tfalse\tShow word count of the input when true\tmaxLength\tnumber\t—\tLimit length of the input\tonChange\tfunction\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/textField":{"title":"Textfield","data":{"":"Text Fields let users enter and edit text.","import#Import:":"import {Textfield} from '@comfortdelgro/react-compass'\nor\nimport Textfield from '@comfortdelgro/react-compass/textfield'","basic-text-field#Basic text field:":"<Textfield placeholder='Enter your name' />","text-field-with-label#Text field with label:":"<Textfield label='Name' placeholder='Enter your name' />","text-field-with-helper-text#Text field with helper text:":"<Textfield\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Helper Text'\n/>","text-field-with-input-error#Text field with input error:":"<Textfield\nerrored\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\n/>","text-field-with-icons#Text field with icons:":"<Textfield label='Name' leftIcon={faThumbsUp} placeholder='Enter your name' />\n<Textfield\nlabel='Name'\nrightIcon={faThumbsUp}\nplaceholder='Enter your name'\n/>","disabled-text-field#Disabled text field:":"<Textfield\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\nisDisabled\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Textfield\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\nisDisabled\ncss={{width: '20rem'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tplaceholder\tstring | null\tnull\tPlaceholder of the text field\tlabel\tstring | null\tnull\tLabel of the text field\thelperText\tstring | null\t—\t\terrored\ttrue | false\tfalse\tThrow error when input value is wrong\tvalue\tstring\t—\tInput value\trightIcon\tIconProp|false| true\tfalse\tIcon placed on the right side of the text field\tleftIcon\tIconProp|false| true\tfalse\tIcon placed on the left side of the text field\tisDisabled\tfalse| true\tfalse\tDisable the text field when true\tcss \tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/design/colors":{"title":"Colors","data":{"":"Color distinguishes a brand. It is used to convey personality, attracts the eye and indicate change.","palette#Palette":"","primary-colors#Primary Colors":"ComfortDelgro color palette has been created to reflect the spirit of our brand. Blue is used across all our communication as an essential element of branding. Primary color is the color displayed most frequently across your app's screens and components.Black is used primarily for body text and headings, and White is used for screen backgrounds and negative space.\nMain Colors\n\n\n\n\n\n\n\n\n\n\nText Colors\n\n\n\n\n\n\n\n\n\n\n\n\nDividers & Borders","secondary-colors#Secondary Colors":"Secondary color provides more ways to accent and distinguish our product. Each color is selected with purpose in order to provide meaningful feedback within our products. Secondary colors can also be used to create unique secondary brands for each one of ComfortDelgro products.","shades--tints#Shades & Tints":"We intend for tints and shades to be ever evolving, offering an endless palette to choose from. Usage of these colors varies depending on scenarios, but they come in handy for components in our products.\nTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverlays\n\n\n\n\n\n\n\n\nGrays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBackgrounds","rules#Rules":"","accessibility#Accessibility":"All our product user interface should meet minimum WCAG AA level contrast guidelines. Low contrast can be problematic for people with lower vision, color blindness or even in non-optimal conditions (outdoor, bright sunlight).","contrast-ratio#Contrast Ratio":"All colors in this section are marked with their contrast ratio against White. If you use these colors on any other background or use these as background with text other than White, you will need to calculate these ratios again.The minimum required contrast ration depends on the text size and weight. To mantain WCAG AA level of contrast ratio, colors are required to be at least 4.5:1 for normal text and 3:1 for large text, and 3:1 for graphics and user interface components (such as form input borders), with exception to text or images of text that are part of an inactive user interface component (disabled states).","rag-red-amber-and-green#RAG (Red, Amber, and Green)":"This palette should only be used to convey status or meaning for messages and feedback. For contexts such as selecting risk, the full RAG palette can be used to reinforce positivity or negativity of the user’s choice."}},"/design/typography":{"title":"Typography","data":{"":"Good typography can help create clear hierarchies, organize information, and guide users through a product or experience.","fonts#Fonts":"Poppin is the primary digital product typeface of Pax app for both iOS and AOS.\nNative OS System feedback will use Roboto for AOS, and SF Sans Pro for IOS.","weights#Weights":"The choice of font weight is also based on the principles of order, stability, and restraint. In most cases, just regular and bold should be enough.","sizes#Sizes":"","display#Display":"","header#Header":"","body#Body":"You can use semibold and bold font weights on these font sizes for emphasises.","labels#Labels":"You can use light, medium and semibold font weights on these font sizes for emphasises.","links#Links":"See Link component reference."}}}