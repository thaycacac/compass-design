{"/":{"title":"Get Started","data":{"":"","what-is-react-compass#What is React Compass?":"React Compass is a library of React components that follows the ARIA Authoring Practices Guide.At the moment, React Compass only supports NextJS.","quick-start-with-nextjs#Quick Start with Next.js":"Install the library\n\n\n\n\nnpm i @comfortdelgro/react-compass\n\n\n\nyarn add @comfortdelgro/react-compass\n\n\n\npnpm add @comfortdelgro/react-compass\n\n\n\nAdd preflight flushing styles for SSR.\n\n\nimport Preflight from '@comfortdelgro/react-compass/preflight'\nimport Document, {\nDocumentContext,\nHead,\nHtml,\nMain,\nNextScript,\n} from 'next/document'\n\nclass MyDocument extends Document {\nstatic async getInitialProps(ctx: DocumentContext) {\nconst initialProps = await Document.getInitialProps(ctx)\nreturn {\n...initialProps,\nstyles: <>{initialProps.styles}</>,\n}\n}\n\nrender() {\nreturn (\n<Html>\n<Head>{Preflight.flush()}</Head>\n<body>\n<Main />\n<NextScript />\n</body>\n</Html>\n)\n}\n}\n\nexport default MyDocument\n\nAdd Preflight component for better CSS resets according to design guidelines.\n\n\nimport Preflight from '@comfortdelgro/react-compass/preflight'\nimport {AppProps} from 'next/app'\n\nconst App: React.FC<AppProps> = ({Component, pageProps}) => {\nreturn (\n<>\n<Preflight />\n<Component {...pageProps} />\n</>\n)\n}\n\nexport default App\n\nYou are good to go!\n\n\nYou can opt out of step 3 but we'd recommend not to."}},"/components/accordions":{"title":"Accordions","data":{"":"Build vertically collapsing accordions in combination with the Collapse component","example#Example":"","basic-example#Basic Example":"import {Accordion} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nreturn (\n<Accordion>\n<Accordion.Title>Title</Accordion.Title>\n<p>\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi,\nofficiis\n</p>\n</Accordion>\n)\n}\n\n\n\nTitle\n\n\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi, officiis","controlled-accordion#Controlled Accordion":"Manually control the behavior of accordions\nimport {Accordion} from '@comfortdelgro/react-compass'\n\nfunction ControlledAccordion() {\nconst lorem = `Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi,\nofficiis corporis magnam quo expedita nostrum temporibus quibusdam ipsa\niste a consequuntur, adipisci eaque. Nobis voluptates impedit obcaecati\nerror optio consequatur.`\n\nconst [expand, setExpand] = useState<string | false>(false)\n\nconst handleControlledAccordion = (id: string) => () => {\nsetExpand((previous) => {\nif (previous === id) {\nreturn false\n}\nreturn id\n})\n}\n\nreturn (\n<Accordion\nexpand={expand === 'first'}\nonExpandChange={handleControlledAccordion('first')}\n>\n<Accordion.Title>\n<p>{lorem}</p>\n</Accordion.Title>\n{lorem}\n{lorem}\n</Accordion>\n\n<Accordion\nexpand={expand === 'second'}\nonExpandChange={handleControlledAccordion('second')}\n>\n<Accordion.Title>\n<p>{lorem}</p>\n</Accordion.Title>\n{lorem}\n{lorem}\n</Accordion>\n\n<Accordion\nexpand={expand === 'third'}\nonExpandChange={handleControlledAccordion('third')}\n>\n<Accordion.Title>\n<p>{lorem}</p>\n</Accordion.Title>\n{lorem}\n{lorem}\n</Accordion>\n)\n}\n\nSee this example in\nladle","expand-by-default#Expand by default":"Set the Accordion to expand by default\nimport {Accordion} from '@comfortdelgro/react-compass'\n\nfunction ExpandDefault() {\nreturn (\n<Accordion defaultExpand={true}>\n<Accordion.Title>Title</Accordion.Title>\n<p>\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi,\nofficiis\n</p>\n</Accordion>\n)\n}\n\n\n\n\nTitle\n\n\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi, officiis","table-accordion#Table Accordion":"import {Accordion} from '@comfortdelgro/react-compass'\n\nfunction TableAccordion() {\nconst data = [\n{id: 1, leftData: 'Job ID', rightData: 'CDG180-1120'},\n{id: 2, leftData: 'Status', rightData: 'Ended'},\n{id: 3, leftData: 'Job Title', rightData: 'Demo 8'},\n{id: 4, leftData: 'Number of Pax', rightData: '4'},\n{id: 5, leftData: 'Job Type', rightData: 'One-way Transfer'},\n{id: 6, leftData: 'Date/Time', rightData: '10/10/2022, 04:10 PM'},\n{id: 7, leftData: 'Pick-up Location', rightData: 'Comfort Building'},\n]\n\nconst renderAccordionTableItems = () => {\nreturn data.map((eachData) => {\nreturn (\n<div key={eachData.id}>\n<p>\n<b>{eachData.leftData}</b>\n</p>\n<p style={{textAlign: 'left'}}>{eachData.rightData}</p>\n</div>\n)\n})\n}\n\nreturn (\n<Accordion>\n<Accordion.Title>\n<h2>Business Profile</h2>\n</Accordion.Title>\n<p>{lorem}</p>\n<Accordion.Table>{renderAccordionTableItems()}</Accordion.Table>\n<p>{lorem}</p>\n</Accordion>\n)\n}\n\nSee this example in\nladle","custom-accordions#Custom Accordions":"You can customize your accordions whatever you like !\nimport {Accordion} from '@comfortdelgro/react-compass'\n\nfunction CustomizedColors() {\nreturn (\n<Accordion\ndefaultExpand={true}\ncss={{background: 'Wheat', color: 'SaddleBrown'}}\n>\n<Accordion.Title\ncss={{\ntextAlign: 'center',\nbackground: 'burlywood',\ntextAlign: 'center',\ncolor: 'currentColor',\n}}\n>\n<p>\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi,\nofficiis Lorem ipsum dolor sit amet consectetur, adipisicing elit.\nQuasi, officiis\n</p>\n</Accordion.Title>\n<p>\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi,\nofficiis\n</p>\n</Accordion>\n)\n}\n\n\n\n\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi, officiis Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi, officiis\n\n\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Quasi, officiis","props#Props":"","accordion#Accordion":"Name\tType\tDefault\tDescription\tchildren *\tReactNode\t—\tThe content to display in the accordion.\texpand\tboolean\tfalse\tIf true, expands the accordion, otherwise collapse it. Setting this prop enables control over the accordion.\tdefaultExpand\tboolean\tfalse\tIf true, expands the accordion by default.\tonExpandChange\tfunction\t—\tCallback fired when the expand/collapse state is changed.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","accordiontitle#Accordion.Title":"Name\tType\tDefault\tDescription\tchildren\tReactNode | string\t—\tThe content to display in the accordion title. If you pass children as a string, it will be render as h1\ticon\tIconProp | false\t—\tThe icon of accordion title. By default it is a circle question mark. You can disable the icon by passing false\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","accordiontable#Accordion.Table":"Name\tType\tDefault\tDescription\tchildren *\tReactNode\t—\tThe content to display in the accordion table.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles."}},"/components/alerts":{"title":"Alerts","data":{"":"Alerts provide short, timely, and relevant information for your users without interrupting their tasks.","import#Import:":"import {Alert} from '@comfortdelgro/react-compass'\nor\nimport Alert from '@comfortdelgro/react-compass/alert'","basic-alerts#Basic alerts:":"This is an info alert — check it out!\n\n\nThis is a sucess alert — check it out!\n\n\nThis is a danger alert — check it out!\n\n\nThis is a warning alert — check it out!\n\n\n<Alert color='info'> This is an info alert — check it out! </Alert>\n\n<Alert color='success'> This is a sucess alert — check it out! </Alert>\n\n<Alert color='danger'> This is a danger alert — check it out! </Alert>\n\n<Alert color='warning'> This is a warning alert — check it out! </Alert>","dismissible#Dismissible:":"This is an info alert — check it out!\n\n\n<Alert color='info' dismissible onDismiss={() => {}}>\nThis is an info alert — check it out!\n</Alert>","transition#Transition:":"You can use a transition component such as AnimatePresence and motion to transition the appearance of the alert.Click ladle to see this in action.\nconst MotionAlert = motion(Alert)\n\nexport const Dismissible: React.FC = () => {\nconst [alerts, setAlerts] = useState([\n{color: 'info' as const, key: 'info'},\n{color: 'success' as const, key: 'success'},\n{color: 'danger' as const, key: 'danger'},\n])\n\nconst removeAlert = (key: string) =>\nsetAlerts((alerts) => alerts.filter((alert) => alert.key !== key))\n\nreturn (\n<Column>\n<AnimatePresence mode='popLayout'>\n{alerts.map((alert) => (\n<MotionAlert\nkey={alert.key}\ncolor={alert.color}\ndismissible\nonDismiss={() => removeAlert(alert.key)}\n// motion\nlayout\nanimate={{x: 0, opacity: 1}}\nexit={{x: -20, opacity: 0}}\ntransition={{duration: 0.2}}\n>\n<AlertContent />\n</MotionAlert>\n))}\n</AnimatePresence>\n</Column>\n)\n}","icons#Icons:":"The icon prop allows you to add an icon to the beginning of the alert component. This will override the default icon for the specified severity.\n\nThis is a success alert — check it out!\n\n\n<Alert color='success' icon={faChessKing}>\nThis is a success alert — check it out!\n</Alert>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nThis is a success alert — check it out!\n\n\n<Alert\ncolor='success'\ncss={{backgroundColor: 'orange', '&:hover': {backgroundColor: 'red'}}}\n>\nThis is a success alert — check it out!\n</Alert>","props#Props:":"Name\tType\tDefault\tDescription\tchildren\tReactNode |String\t—\tThe content to display in the alerts.\tdismissible\tboolean\tfalse\tIf true, show the close icon.\tonDismiss\tfunction\t—\tCallback to close the alerts.\ticon\tIconProp | false\t—\tThe icon of the alerts. It'd disappear if the value is false.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/avatars":{"title":"Avatars","data":{"":"Avatars can be used in everything including a person's profile picture, dialog menu, ext.","import#Import:":"import {Avatar} from '@comfortdelgro/react-compass'\nor\nimport Avatar from '@comfortdelgro/react-compass/avatar'","image-avatars#Image avatars:":"<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=32'\nsize='lg'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=31'\nsize='lg'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=60'\nsize='lg'\n/>","letter-avatars#Letter avatars:":"<Avatar label='Albert Einstein' size='lg' />\n\n<Avatar label='Adam Levine' size='lg' />\n\n<Avatar label='Dwane Johnson' size='lg' />","sizes#Sizes:":"<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=32'\nsize='xs'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=31'\nsize='sm'\n/>\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?img=60'\nsize='md'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e29026704d'\nsize='lg'\n/>","icon-avatars#Icon avatars:":"<Avatar label='Albert Einstein' icon={faRegularUser} size='lg' />","grouped#Grouped":"<Avatar.Group display={3}>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e29026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0581f4e29d026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e429026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a042581f4e42239026704d'\nsize='lg'\n/>\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0425e81f4234e429026704d'\nsize='lg'\n/>\n</Avatar.Group>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Avatar\nlabel='Albert Einstein'\nimage='https://i.pravatar.cc/150?u=a0425e81423429026704d'\nsize='lg'\ncss={{opacity: '0.8', '&:hover': {opacity: '0.5', cursor: 'pointer'}}}\n/>","props#Props:":"","avatar-#<Avatar/> :":"Name\tType\tDefault\tDescription\tlabel\tString\t—\tThe label, used as fallback for image. The avatars would show the initials of the labels.\timage\tString \t—\tImage of the avatars takes the highest priority. We pass the image's address as string to this prop.\tsize\txs|sm|md|lg\t—\tSizes of the avatars.\ticon\tIconProp|false| true\tfalse\tThe icon of the alerts. It'd disappear if the value is false.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","avatargroup-#<Avatar.Group/> :":"Name\tType\tDefault\tDescription\tchildren\tReactNode | String\t—\tWe pass our avatars as children props to Avatar.Group.\tdisplay\tNumber\t—\tDisplay prop determines the number of avatar displayed.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/badges":{"title":"Badges","data":{"":"Badges can be used to highlight important bits of information such as labels, notifications, data trends & status.","import#Import:":"import {Badge} from '@comfortdelgro/react-compass'\nor\nimport Badge from '@comfortdelgro/react-compass/badge'","basic#Basic:":"<Badge label='Default' />","colors-#Colors :":"<Badge label='Info' color='info' />\n\n<Badge label='Success' color='success' />\n\n<Badge label='Danger' color='danger' />\n\n<Badge label='Warning' color='warning />","variants#Variants:":"<Badge label='Primary' color='danger' variant='primary' />\n<Badge label='Secondary' color='danger' variant='secondary' />\n<Badge label='Outline' color='danger' variant='outline' />","default-icon#Default icon:":"<Badge label='Primary' color='info' variant='primary' icon />\n<Badge label='Success' color='success' variant='primary' icon />\n<Badge label='Secondary' color='danger' variant='secondary' icon />\n<Badge label='Outline' color='warning' variant='outline' icon />","custom-icon#Custom icon:":"<Badge\nlabel='LGTM'\ncolor='success'\nvariant='secondary'\nicon={faThumbsUp}\n/>\n<Badge\nlabel='Practice Social Distancing'\ncolor='danger'\nvariant='outline'\nicon={faVirus}\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Badge\nlabel='Outline'\ncolor='warning'\nvariant='outline'\ncss={{color: 'purple', '&:hover': {backgroundColor: 'grey'}}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tcolor\tinfo | success | warning | danger\tinfo\tThese colors will determine the color of background of the badges.\tlabel\tString \t—\tLable of the badges.\tvariant\tprimary | secondary | outline\tprimary\tVariants will determine the color of the badges' label, border and the darkness of its background .\ticon\tIconProp|false| true\tfalse\tWhen false, no icon is shown in the badge. When true, the default icons are shown. And you can pass in custom icons to this prop.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/breadcrumbs":{"title":"Breadcrumbs","data":{"":"Breadcrumbs consist of a list of links that help a user visualize a page's location within the hierarchical structure of a website, and allow navigation up to any of its \"ancestors\".","import#Import:":"import {Breadcrumbs} from '@comfortdelgro/react-compass'\nor\nimport Breadcrumbs from '@comfortdelgro/react-compass/breadcrumbs'","basic#Basic:":"const isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n\n;<Breadcrumbs isCurrent={isCurrent}>\n<Breadcrumbs.Item href='#0'>Home</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#1'>Library</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#2' isDisabled>\nDisabled\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#3'>Data</Breadcrumbs.Item>\n</Breadcrumbs>","colors-#Colors :":"const isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n;<Breadcrumbs dividerIcon={faVirus} isCurrent={isCurrent}>\n<BreadcrumbItem href='#0'>Home</BreadcrumbItem>\n<BreadcrumbItem href='#1'>Library</BreadcrumbItem>\n<BreadcrumbItem href='#2'>Data</BreadcrumbItem>\n</Breadcrumbs>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\nconst isCurrent = (i: number) => {\nif (window && window.location) return window.location.hash === `#${i}`\nreturn false\n}\n\n;<Breadcrumbs isCurrent={isCurrent}>\n<Breadcrumbs.Item href='#0' css={{'&:hover': {color: 'black'}}}>\nHome\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#1' css={{'&:hover': {color: 'black'}}}>\nLibrary\n</Breadcrumbs.Item>\n<Breadcrumbs.Item href='#2' css={{'&:hover': {color: 'black'}}}>\nData\n</Breadcrumbs.Item>\n</Breadcrumbs>","props#Props:":"Name\tType\tDefault\tDescription\tisCurrent\t(i:number) => boolean\tfalse\t\tdividerIcon\tIconProp|false| true\t—\n\nCheck out our ladle for more info on\nthis component."}},"/components/buttons":{"title":"Buttons","data":{"":"Buttons allow users to take actions, and make choices, with a single tap.","import#Import:":"import {Button} from '@comfortdelgro/react-compass'\nor\nimport Button from '@comfortdelgro/react-compass/button'","button-variants#Button Variants:":"Primary\n\n\nSecondary\n\n\nDanger\n\n\nGhost\n\n\nDisabled\n\n\n<Button variant='primary'>Primary</Button>\n<Button variant='secondary'>Secondary</Button>\n<Button variant='danger'>Danger</Button>\n<Button variant='ghost'>Ghost</Button>\n<Button isDisabled>Disabled</Button>","buttons-with-left-icons-#Buttons with left icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' leftIcon={faThumbsUp}>\nSecondary\n</Button>\n<Button variant='danger' leftIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' leftIcon={faThumbsUp}>\nGhost\n</Button>","buttons-with-right-icons-#Buttons with right icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' rightIcon={faThumbsUp}>\nSecondary\n</Button>\n<Button variant='danger' rightIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' rightIcon={faThumbsUp}>\nGhost\n</Button>","buttons-with-both-left-and-right-icons-#Buttons with both left and right icons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' rightIcon={faThumbsUp} leftIcon={faVirus}>\nSecondary\n</Button>\n<Button variant='danger' rightIcon={faThumbsUp} leftIcon={faVirus}>\nDanger\n</Button>\n<Button variant='ghost' rightIcon={faThumbsUp} leftIcon={faVirus}>\nGhost\n</Button>","buttons-with-icons-as-content#Buttons with icons as content:":"import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\n\n<Button variant='secondary'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>\n<Button variant='danger'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>\n<Button variant='ghost'>\n<FontAwesomeIcon icon={faVirus} />\n</Button>","loading-buttons-#Loading buttons :":"Secondary\n\nDanger\n\nGhost\n\n\n<Button variant='secondary' loading>\nSecondary\n</Button>\n<Button variant='danger' loading rightIcon={faThumbsUp}>\nDanger\n</Button>\n<Button variant='ghost' loading rightIcon={faThumbsUp}>\nGhost\n</Button>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nDanger\n\n\n<Button\nvariant='danger'\nrightIcon={faThumbsUp}\ncss={{'&:hover': {color: 'grey'}}}\n>\nDanger\n</Button>","props#Props:":"Name\tType\tDefault\tDescription\tcolor\tinfo | success | warning | danger\t\t\trightIcon\tIconProp|false| true\t—\t\tleftIcon\tIconProp|false| true\t\t\tvariant\tprimary | secondary | danger | ghost\t\t\tcss\tCSS\t—\t\tisDisabled\t\t\t\tloading\tfalse| true\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/cards":{"title":"Cards","data":{"":"Cards provide a flexible and extensible content container with multiple variants and options","example#Example":"import {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nreturn (\n<Card size='sm'>\n<Card.Body>\n<Card.Title>Card title</Card.Title>\n<p>This is a card paragraph</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard title\n\n\nThis is a card paragraph","content#Content":"","body#Body":"Use <Card.Body> to pad content inside a <Card>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BodyOnlyExample() {\nreturn (\n<Card size='sm'>\n<Card.Body>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nThis is a paragraph within a card body","title#Title":"Use <Card.Title> to create a title inside a <Card.Body>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction TitleExample() {\nreturn (\n<Card size='sm'>\n<Card.Body>\n<Card.Title>Card title</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard title\n\n\nThis is a paragraph within a card body\n\n\n\nYou can also use a different heading tag inside <Card.Title>\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction H1TitleExample() {\nreturn (\n<Card size='lg'>\n<Card.Body>\n<Card.Title>\n<h1>Card title as H1</h1>\n</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\n\nCard title as H1\n\n\nThis is a paragraph within a card body","image#Image":"Use <Card.Image> to embed the image in a card <Card>.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction ImageExample() {\nconst imageSrc =\n'https://images.unsplash.com/flagged/photo-1562503542-2a1e6f03b16b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8c2luZ2Fwb3JlfGVufDB8fDB8fA%3D%3D&w=1000&q=80'\n\nreturn (\n<Card size='lg'>\n<Card.Image src={imageSrc} />\n<Card.Body>\n<Card.Title>Card with image</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\n\n\nCard with image\n\n\nThis is a paragraph within a card body","sizes#Sizes":"Card comes with different sizes: sm, lg and full.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nconst sizes = ['sm', 'lg', 'full']\n\nreturn (\n{sizes.map((size) => (\n<Card size={size}>\n<Card.Body>\n<Card.Title>\nCard with size: {size}\n</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n))}\n);\n}\n\n\nYou can fully customize the card size.\nimport {Card} from '@comfortdelgro/react-compass'\n\nfunction BasicExample() {\nconst cardSize = '460px'\n\nreturn (\n<Card css={{width: cardSize}}>\n<Card.Body>\n<Card.Title>Card with customized size</Card.Title>\n<p>This is a paragraph within a card body</p>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nCard with customized size\n\nThis is a paragraph within a card body","disabled#Disabled":"Card can be disabled by passing isDisabled prop.\nimport {Card} from '@comfortdelgro/react-compass'\nimport Button from '@comfortdelgro/react-compass/button'\n\nfunction DisabledCard() {\nconst isDisabled = true\nreturn (\n<Card size='sm' isDisabled={isDisabled}>\n<Card.Body>\n<Card.Title>Disabled Card</Card.Title>\n<p>This is a paragraph within a card body</p>\n<Button isDisabled={isDisabled} variant='primary'>\nButton\n</Button>\n</Card.Body>\n</Card>\n)\n}\n\n\n\n\nDisabled Card\n\n\nThis is a paragraph within a card body\n\n\nButton","props#Props":"","card#Card":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card.\tsize\tsm | lg | full\tfull\tThe size of the Card\tisDisabled\tboolean\tfalse\tWhether the card is disabled.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-body#Card Body":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card Image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-title#Card Title":"Name\tType\tDefault\tDescription\tchildren\tReactNode\t—\tThe content to display in the Card Image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","card-image#Card Image":"Name\tType\tDefault\tDescription\tsrc *\tstring\t—\tThe URL of the image.\talt *\tstring\t—\tText description of the image.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles."}},"/components/link":{"title":"Link","data":{"":"The Link component allows you to easily customize anchor elements with your theme colors and typography styles.","import#Import:":"import {Link} from '@comfortdelgro/react-compass'\nor\nimport Link from '@comfortdelgro/react-compass/link'","basic-link#Basic Link:":"Go to another page\n\nGo to Google\n\n\n<Link href='/#page'>Go to another page</Link>\n<Link href='https://google.com' external>\nGo to Google\n</Link>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\nGo to Google\n\n\n<Link\nhref='https://google.com'\nexternal\ncss={{textDecoration: 'line-through', '&:hover': {color: 'grey'}}}\n>\nGo to Google\n</Link>","props#Props:":"Name\tType\tDefault\tDescription\texternal\tfalse| true\tfalse\tSet to extinal website when true\tcss\tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/menu-lists":{"title":"Menu Lists","data":{"":"The Menu List component allows you to create a menu with expandable items","import#Import:":"import {MenuList, MenuListDropdown} from '@comfortdelgro/react-compass'\nor\nimport MenuList, {MenuListDropdown} from '@comfortdelgro/react-compass/MenuList'","basic-menu-list#Basic Menu List":"Dashboard\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\n\n\n<MenuList css={{height: '600px'}}>\n<MenuListDropdown>\n<MenuListDropdown.Header>Dashboard</MenuListDropdown.Header>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item isActive>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n</MenuListDropdown>\n</MenuList>","menu-list-with-icon#Menu List with Icon":"Dashboard\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\n\n\n<MenuList css={{height: '600px'}}>\n<MenuListDropdown>\n<MenuListDropdown.Header>Dashboard</MenuListDropdown.Header>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item isActive icon={faUser}>\nMenu\n</MenuListDropdown.Item>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item icon={faUser}>Menu</MenuListDropdown.Item>\n</MenuListDropdown>\n</MenuList>","nested-menu-list#Nested Menu List":"Dashboard\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\n\nDashboard\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\nMenu\n\n\n\n\n\n\n<MenuList css={{height: '800px'}}>\n<MenuListDropdown>\n<MenuListDropdown.Header>Dashboard</MenuListDropdown.Header>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item isActive>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item isNested>\n<MenuListDropdown>\n<MenuListDropdown.Header>Dashboard</MenuListDropdown.Header>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n<MenuListDropdown.Item>Menu</MenuListDropdown.Item>\n</MenuListDropdown>\n</MenuListDropdown.Item>\n</MenuListDropdown>\n</MenuList>","props#Props":"","menulist#MenuList":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\tcss\tCSS\t—","menulistdropdown#MenuListDropdown":"Name\tType\tDefault\tDescription\tchildren*\tReact.ReactNode\t—\tThe first child must be the trigger.\tisOpen\tboolean\t—\tWhether the list is open by default (controlled).\tdefaultOpen\tboolean\ttrue\tWhether the list is open by default (uncontrolled).\tonMenuListChange\t(isOpen: boolean) => void\t—\tHandler that is called when the list changes.\tcss\tCSS\t—","menulistdropdownheader#MenuListDropdown.Header":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\tleftIcon\tIconProp | false\ttrue\t\trightIcon\tIconProp | true\tfalse\t\tcss\tCSS\t—","menulistdropdownitem#MenuListDropdown.Item":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\tisActive\tboolean\tfalse\tWhether the item is currently activated or not\ticon\tIconProp\t—\t\tcss\tCSS\t—"}},"/components/navbar":{"title":"Navbar","data":{"":"The Navbar displays horizontally information and navigation relating to the current screen.","import#Import":"import {Navbar} from '@comfortdelgro/react-compass'\nor\nimport Navbar from '@comfortdelgro/react-compass/navbar'","basic-navbar#Basic Navbar":"Workbench Title\n\n\nHome\n\n\nServices\n\n\nProducts\n\n\n\n<Navbar>\n<Avatar size='sm' label='asd' />\n<Navbar.Brand>Workbench Title</Navbar.Brand>\n<Button>Home</Button>\n<Button>Services</Button>\n<Button>Products</Button>\n</Navbar>","brand#Brand":"Navbar Brand renders heading text that adapt to the current color of the Navbar\n\n\nWorkbench Title\n\n\n\n<Navbar>\n<Navbar.Brand>Workbench Title</Navbar.Brand>\n</Navbar>","icon#Icon":"Navbar Icon renders Icon that adapt to the current color of the Navbar\n\n\n\n\n\n\n<Navbar>\n<Navbar.Icon icon={faSearch} />\n</Navbar>","variants#Variants":"","portal-version#Portal Version":"Home\n\n\nServices\n\n\nProducts\n\n\n\n<Navbar variant='portal'>\n<Avatar size='sm' label='asd' />\n<Button>Home</Button>\n<Button>Services</Button>\n<Button>Products</Button>\n</Navbar>","website-version#Website Version":"Home\n\n\nServices\n\n\nProducts\n\n\n\n\n<Navbar variant='website'>\n<Avatar size='lg' label='asd' />\n<div\nstyle={{\ndisplay: 'flex',\njustifyContent: 'flex-end',\nflexGrow: 1,\ngap: '12px',\nalignItems: 'center',\n}}\n>\n<Button>Home</Button>\n<Button>Services</Button>\n<Button>Products</Button>\n</div>\n</Navbar>","colors#Colors":"","blue-color-version#Blue Color Version":"Workbench Title\n\n\nHome\n\n\nServices\n\n\nProducts\n\n\n\n<Navbar color='blue'>\n<Avatar size='sm' label='asd' />\n<Navbar.Brand>Workbench Title</Navbar.Brand>\n<Button>Home</Button>\n<Button>Services</Button>\n<Button>Products</Button>\n</Navbar>","white-color-version#White Color Version":"Workbench Title\n\n\nHome\n\n\nServices\n\n\nProducts\n\n\n\n<Navbar color='white'>\n<Avatar size='sm' label='asd' />\n<Navbar.Brand>Workbench Title</Navbar.Brand>\n<Button variant='ghost'>Home</Button>\n<Button variant='ghost'>Services</Button>\n<Button variant='ghost'>Products</Button>\n</Navbar>","props#Props":"","navbar#Navbar":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\tcolor\twhite | blue\t—\t\tvariant\tportal | website\t—\t\tcss\tCSS\t—","navbarbrand#Navbar.Brand":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\tcss\tCSS\t—","navbaricon#Navbar.Icon":"Name\tType\tDefault\tDescription\ticon\tIconProp\t—\t\tcss\tCSS\t—"}},"/components/radio":{"title":"Radio","data":{"":"Radio allow users to select a single item from a list of mutually exclusive options.","import#Import":"import {Radio, RadioGroupProps, RadioProps} from '@comfortdelgro/react-compass'\nor\nimport {Radio, RadioGroupProps, RadioProps} from '@comfortdelgro/react-compass/radio'\nWe recommend the second method to import components for the benefits of tree shaking.","variants#Variants":"Outlined style\n<Radio.Group>\n<Radio\nvariant='outlined'\nlabel='test'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='1'\ntooltip='This is tooltip'\n/>\n<Radio\nvariant='outlined'\nlabel='test2'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='2'\n/>\n<Radio\nvariant='outlined'\nlabel='test3'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='3'\nisDisabled\n/>\n</Radio.Group>\n\n\n\n\n\n\n\n\n\n\nSimple style as default\n<Radio.Group>\n<Radio\nvariant='simple'\nlabel='test'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='1'\ntooltip='This is tooltip'\n/>\n<Radio\nvariant='simple'\nlabel='test2'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='2'\n/>\n<Radio\nvariant='simple'\nlabel='test3'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='3'\nisDisabled\n/>\n</Radio.Group>","orientation#Orientation":"Orientation horizontal\n<Radio.Group orientation='horizontal'>\n<Radio\nlabel='test'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='1'\ntooltip='This is tooltip'\n/>\n<Radio\nlabel='test2'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='2'\n/>\n</Radio.Group>\n\n\n\n\n\n\n\n\nOrientation vertical as default\n<Radio.Group orientation='vertical'>\n<Radio\nlabel='test'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='1'\ntooltip='This is tooltip'\n/>\n<Radio\nlabel='test2'\ndescription='Lorem ipsum dolor sit amet, consectetur adipiscing elit'\nvalue='2'\n/>\n</Radio.Group>","props#Props":"","radiogroup-props#Radio.Group Props:":"Name\tType\tDefault\tDescription\tchildren*\t[ReactElement, ReactElement]\t—\tChildrent must be Radio component\torientation\tvertical | horizontal\tvertical\tThe axis the Radio Button(s) should align with.\tname\tstring\t-\tThe name of the RadioGroup, used when submitting an HTML form.\tvalue\tstring\t-\tThe current value (controlled).\tdefaultValue\tstring\t-\tThe current value (uncontrolled).\tonChange\t(value: boolean) => void\t-\tHandler that is called when the value changes.\tisDisabled\tboolean\tfalse\tWhether the input is disabled.\tisReadOnly\tboolean\tfalse\tWhether the input can be selected but not changed by the user.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","radio-props#Radio Props":"Name\tType\tDefault\tDescription\ttitle\tstring\t—\tDisplay title for radio\tdescription\tstring\t—\tDisplay description for radio\trightLabel\tstring\t—\tDisplay rightLabel for radio\ttooltip\tstring\t—\tDisplay tooltip for radio\tvalue\tstring\t-\tThe value of the radio button, used when submitting an HTML form.\tisDisabled\tboolean\tfalse\tWhether the radio button is disabled or not. Shows that a selection exists, but is not available in that circumstance.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/searchField":{"title":"Searchfield","data":{"":"Search Fields let users enter search input.","import#Import:":"import {SearchField} from '@comfortdelgro/react-compass'\nor\nimport SearchField from '@comfortdelgro/react-compass/searchfield'","basic-search-field#Basic Search Field:":"<SearchField placeholder='Search' onSubmit={(text) => console.log(text)} />\n<SearchField\nisDisabled\nplaceholder='Search'\nonSubmit={(text) => console.log(text)}\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<SearchField\nplaceholder='Search'\nonSubmit={(text) => console.log(text)}\ncss={{border: '1px solid gray'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tisDisabled\tfalse| true\t\t\tonSubmit\t(i:string)=>void\t—\t\tcss\tCSS\t—\n\nCheck out our ladle for more info on\nthis component."}},"/components/sidenav":{"title":"Sidenav","data":{"":"The Sidenav displays horizontally information and navigation relating to the current screen.","import#Import":"import {Sidenav} from '@comfortdelgro/react-compass'\nor\nimport Sidenav from '@comfortdelgro/react-compass/Sidenav'","basic-sidenav#Basic Sidenav":"Workbench\n\n\n\n\n\n\n\nMenu\n\n\n\n\n\nMenu\n\n\n\n\n\nMenu\n\n\n\n\n\nMenu\n\n\n\n\n<Sidenav css={{height: '800px'}}>\n<Sidenav.Item>\n<Avatar label='M' />\n<h2 style={{fontSize: '24px', marginLeft: '22px', color: '#323130'}}>\nWorkbench\n</h2>\n</Sidenav.Item>\n<Sidenav.Divider />\n<Sidenav.Item>\n<Icon icon={faAmbulance}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n<Sidenav.Item>\n<Icon icon={faBank}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n<Sidenav.Item>\n<Icon icon={faCar}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n<Sidenav.Item>\n<Icon icon={faHelicopter}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n</Sidenav>","expand#Expand":"You can expand the Sidenav without hovering\n\n\n\n\n\nMenu\n\n\n\n\n<Sidenav css={{height: '800px'}} expand>\n<Sidenav.Item isActive>\n<Icon icon={faHelicopter}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n</Sidenav>","sidenav-item#Sidenav Item":"Sidenav Item accepts two children. If Sidenav is not in expand mode, only the first child will be rendered\n\n\n\n\n\nMenu\n\n\n\n\n<Sidenav css={{height: '800px'}}>\n<Sidenav.Item isActive>\n<Icon icon={faHelicopter}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n</Sidenav>","sidenav-divider#Sidenav Divider":"Sidenav divider provides a horizontal divider to Sidenav\n\n\n\n\n\nMenu\n\n\n\n\n\n\n\nMenu\n\n\n\n\n<Sidenav css={{height: '800px'}}>\n<Sidenav.Item isActive>\n<Icon icon={faHelicopter}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n<Sidenav.Divider />\n<Sidenav.Item>\n<Icon icon={faHelicopter}></Icon>\n<span>Menu</span>\n</Sidenav.Item>\n</Sidenav>","props#Props":"","sidenav#Sidenav":"Name\tType\tDefault\tDescription\tchildren\tReact.ReactNode\t—\t\texpand\tboolean\tfalse\tWhether the Sidenav is expanded by default or expanded by hover\tcss\tCSS\t—","sidenav-item-1#Sidenav Item":"Name\tType\tDefault\tDescription\tchildren*\tReact.ReactNode\t—\tAccept only two children\tisActive\tboolean\tfalse\tWhether the item is currently activated or not\tcss\tCSS\t—","sidenav-divider-1#Sidenav Divider":"Name\tType\tDefault\tDescription\tcss\tCSS\t—"}},"/components/slider":{"title":"Slider","data":{"":"Provides the behavior and accessibility implementation for a slider component representing one or more values.","import#Import:":"import {Slider} from '@comfortdelgro/react-compass'\nor\nimport Slider from '@comfortdelgro/react-compass/slider'","basic-usage#Basic Usage:":"<Slider />\n<Slider value={20} onChangeEnd={(val) => console.log(val)} />\n<Slider isDisabled />","props#Props:":"Name\tType\tDefault\tDescription\tisDisabled\tboolean\tfalse\tWhether the Slider are disabled. Shows that a selection exists, but is not available in that circumstance.\tonChangeEnd\t(value: number) => void\t—\tFired when the slider stops moving, due to being let go.\tonChange\t(value: number) => void\t—\tHandler that is called when the value changes.\tminValue\tnumber\t0\tThe slider's minimum value.\tmaxValue\tnumber\t100\tThe slider's maximum value.\tstep\tnumber\t1\tThe slider's step value.\tvalue\tnumber\t0\tThe current value (controlled).\tdefaultValue\tnumber\t0\tThe currently selected key in the collection (uncontrolled).\tclassName\tString\t—\tExtra class name for slider.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/spinners":{"title":"Spinners","data":{"":"Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.","import#Import:":"import {Spinner} from '@comfortdelgro/react-compass'\nor\nimport Spinner from '@comfortdelgro/react-compass/spinner'","default-circular#Default Circular:":"<Spinner size='2xl' />\n<Spinner size='xl' />\n<Spinner size='lg' />\n<Spinner size='md' />\n<Spinner size='sm' />","circular-without-label#Circular without label:":"<Spinner size='2xl' label={false} />\n<Spinner size='xl' label={false} />\n<Spinner size='lg' label={false} />\n<Spinner size='md' label={false} />\n<Spinner size='sm' label={false} />","circular-with-custom-label#Circular with custom label:":"<Spinner size='2xl' label={'Running...'} />","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Spinner size='2xl' css={{height: '15em'}} />","props#Props:":"Name\tType\tDefault\tDescription\tsize\tsm| md | lg | xl | 2xl\t\t\tlabel\tfalse| true | String\t—\t\tcss\tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/tabs":{"title":"Tabs","data":{"":"Provides the behavior and accessibility implementation for a tab list. Tabs organize content into multiple sections and allow users to navigate between them.","import#Import:":"import {Tabs, TabsProps} from '@comfortdelgro/react-compass'\nor\nimport Tabs, {TabsProps} from '@comfortdelgro/react-compass/Tabs'\nWe recommend the second method to import components for the benefits of tree shaking.\n\n\nArma virumque cano, Troiae qui primus ab oris.\n\nSenatus Populusque Romanus.\n\nAlea jacta est.","variant#Variant:":"Tab provide 2 style of tab: simple and rounded as default\n<Tabs variant='simple' disabledKeys={['1']}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>\n\n<Tabs variant='rounded' disabledKeys={['1']}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>","tab-item-icon#Tab Item Icon:":"You can define the position of the icon by props of Tab.Item\n\n\nArma virumque cano, Troiae qui primus ab oris.\n\nSenatus Populusque Romanus.\n\nAlea jacta est.\n\n\n\n<Tabs icon='left' disabledKeys={['1']}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>","orientation#Orientation:":"Direction of the tab: vertical and horizontal as default\n\n\nArma virumque cano, Troiae qui primus ab oris.\n\nSenatus Populusque Romanus.\n\nAlea jacta est.\n\n\n\nArma virumque cano, Troiae qui primus ab oris.\n\nSenatus Populusque Romanus.\n\nAlea jacta est.\n\n\n\n<Tabs orientation='horizontal' disabledKeys={['1']}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>\n\n<Tabs orientation='vertical' disabledKeys={['1']}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\nArma virumque cano, Troiae qui primus ab oris.\n\nSenatus Populusque Romanus.\n\nAlea jacta est.\n\n\n\n<Tabs disabledKeys={['1']} css={{ backgroundColor: 'cyan' }}>\n<Tabs.Item key='1' title='Founding of Rome'>\nArma virumque cano, Troiae qui primus ab oris.\n</Tabs.Item>\n<Tabs.Item key='2' title='Monarchy and Republic'>\nSenatus Populusque Romanus.\n</Tabs.Item>\n<Tabs.Item key='3' title='Empire'>\nAlea jacta est.\n</Tabs.Item>\n</Tabs>","props#Props:":"","tabs-#<Tabs/> :":"Name\tType\tDefault\tDescription\tchildren*\tReactNode\t—\tThe contents of the collection.\tvariant\trounded,simple\trounded\tStyle of the tab\torientation\thorizontal|vertical\thorizontal\tDirection of the tab\ticon\tnone | left| right| top\tnone\tDisplay icon in tab content\tisDisabled\tboolean\tfalse\tWhether the Tabs are disabled. Shows that a selection exists, but is not available in that circumstance.\tdisabledKeys\tKey[]\t—\tThe item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\tdefaultSelectedKey\tKey\t—\tThe currently selected key in the collection (uncontrolled).\tselectedKey\tKey\t—\tThe currently selected key in the collection (controlled).\tonSelectionChange\t(value) => void\t—\tHandler that is called when the selection changes.\tkeyboardActivation\tautomatic|manual\tautomatic\tWhether tabs are activated automatically on focus or manually.\tclassName\tString\t—\tExtra class name for tab.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","tabitem-#<Tab.Item/> :":"Name\tType\tDefault\tDescription\ttitle\tstring\t—\tThe title of the tab.\tkey\tKey\t—\tThe key of the tab.\tchildren\tReactNode | String\t—\tThe content of the tab Item\tclassName\tString\t-\tExtra class name for tab\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this component."}},"/components/textField":{"title":"Textfield","data":{"":"Text Fields let users enter and edit text.","import#Import:":"import {Textfield} from '@comfortdelgro/react-compass'\nor\nimport Textfield from '@comfortdelgro/react-compass/textfield'","basic-text-field#Basic text field:":"<Textfield placeholder='Enter your name' />","text-field-with-label#Text field with label:":"<Textfield label='Name' placeholder='Enter your name' />","text-field-with-helper-text#Text field with helper text:":"<Textfield\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Helper Text'\n/>","text-field-with-input-error#Text field with input error:":"<Textfield\nerrored\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\n/>","text-field-with-icons#Text field with icons:":"<Textfield label='Name' leftIcon={faThumbsUp} placeholder='Enter your name' />\n<Textfield\nlabel='Name'\nrightIcon={faThumbsUp}\nplaceholder='Enter your name'\n/>","disabled-text-field#Disabled text field:":"<Textfield\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\nisDisabled\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Textfield\nvalue='Wrong Value'\nlabel='Name'\nplaceholder='Enter your name'\nhelperText='Use Helper Text for Errors'\nisDisabled\ncss={{width: '20rem'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tplaceholder\tstring | null\tnull\tPlaceholder of the text field\tlabel\tstring | null\tnull\tLabel of the text field\thelperText\tstring | null\t—\t\terrored\ttrue | false\tfalse\tThrow error when input value is wrong\tvalue\tstring\t—\tInput value\trightIcon\tIconProp|false| true\tfalse\tIcon placed on the right side of the text field\tleftIcon\tIconProp|false| true\tfalse\tIcon placed on the left side of the text field\tisDisabled\tfalse| true\tfalse\tDisable the text field when true\tcss \tCSS\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/textarea":{"title":"Textarea","data":{"":"Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.","import#Import:":"import {Textarea} from '@comfortdelgro/react-compass'\nor\nimport Textarea from '@comfortdelgro/react-compass/textarea'","basic-text-areas#Basic text areas:":"<Textarea placeholder='Enter your message' />\n<Textarea label='Text Label' placeholder='Enter your message' isDisabled/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nvalue='Lorem ipsum dolor sit amet.'\n/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nvalue={'Lorem ipsum dolor sit amet.'}\nonChange={() => {}}\n/>\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nerrored\n/>","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Textarea\nlabel='Text Label'\nplaceholder='Enter your message'\nwordCount\nmaxLength={50}\nerrored\ncss={{height: '10em', width: '50em'}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tplaceholder\tstring | null\tnull\tPlaceholder of the text field\tlabel\tstring | null\tnull\tLabel of the text field\terrored\ttrue | false\tfalse\tThrow error when input value is wrong\tvalue\tstring\t—\tInput value\tisDisabled\tfalse| true\tfalse\tDisable the text field when true\tcss \tCSS\t—\t\twordCount\tfalse| true\tfalse\tShow word count of the input when true\tmaxLength\tnumber\t—\tLimit length of the input\tonChange\tfunction\t—\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/toggle":{"title":"Toggle","data":{"":"Provides the behavior and accessibility implementation for a toggle component. A toggle is similar to a checkbox, but represents on/off values as opposed to selection.","import#Import:":"import {Toggle} from '@comfortdelgro/react-compass'\nor\nimport Toggle from '@comfortdelgro/react-compass/toggle'","basic-usage#Basic Usage:":"<Toggle />\n<Toggle isDisabled />\n<Toggle isDisabled isSelected />","size#Size:":"Small as default\n<Toggle size='sm' />\n\n\n\n\nLarge\n<Toggle size='lg' />","custom-styling#Custom styling:":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n\n\n\n\n<Toggle\ncss={{'&:hover': {background: 'red'}}}\n/>","props#Props:":"Name\tType\tDefault\tDescription\tdefaultSelected\tboolean\tfalse\tWhether the Toggle should be selected (uncontrolled).\tisSelected\tboolean\tfalse\tWhether the Toggle should be selected (controlled).\tonChange\t(isSelected: boolean) => void\t-\tHandler that is called when the Toggle's selection state changes.\tvalue\tstring\t-\tThe value of the input element, used when submitting an HTML form. See MDN.\tname\tstring\t-\tThe name of the input element, used when submitting an HTML form. See MDN.\tisDisabled\tboolean\tfalse\tWhether the input is disabled.\tisReadOnly\tboolean\tfalse\tWhether the input can be selected but not changed by the user.\tautoFocus\tboolean\tfalse\tWhether the element should receive focus on render.\tonFocus\t(e: FocusEvent) => void\t-\tHandler that is called when the element receives focus.\tonBlur\t(e: FocusEvent) => void\t-\tHandler that is called when the element loses focus.\tonFocusChange\t(isFocused: boolean) => void\t-\tHandler that is called when the element's focus status changes.\tonKeyDown\t(e: KeyboardEvent) => void\t-\tHandler that is called when a key is pressed.\tonKeyUp\t(e: KeyboardEvent) => void\t-\tHandler that is called when a key is released.\tonFocus\t(e: FocusEvent) => void\t-\tHandler that is called when the element receives focus.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/tooltips":{"title":"Tooltips","data":{"":"Display container for Tooltip content. Has a directional arrow dependent on its placement.","import#Import":"import {Tooltip, TooltipTrigger} from '@comfortdelgro/react-compass'\nor\nimport {Tooltip, TooltipTrigger} from '@comfortdelgro/react-compass/tooltip'\nWe recommend the second method to import components for the benefits of tree shaking.","content#Content":"The TooltipTrigger accepts exactly two children: the element which triggers the display of the Tooltip and the Tooltip itself. The trigger element must be the first child passed into the TooltipTrigger. All content should be internationalized.","basic-tooltip#Basic tooltip":"<TooltipTrigger>\n<a href=\"#\">Hover me</a>\n<Tooltip>\nTooltip\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\nTooltip","title#Title":"Render title of the tooltip\n<TooltipTrigger>\n<a href='#'>Hover me</a>\n<Tooltip title=\"Title\" dismissible>\nTooltip\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nTooltip","tooltip-delay#Tooltip Delay":"Adjust delay of tooltip after hovering the trigger\n<TooltipTrigger delay={1000}>\n<a href='#'>Hover me</a>\n<Tooltip>\nTooltip\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\nTooltip","dismissible#Dismissible":"Enable a close button in the tooltip\n<TooltipTrigger>\n<a href='#'>Hover me</a>\n<Tooltip dismissible>\nTooltip\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nTooltip","custom-styling#Custom styling":"You can style React Compass's components with the css prop.\nWith css prop, you can basically do anything that css can do.\n<TooltipTrigger>\n<a href='#'>Hover me</a>\n<Tooltip\ntitle={<p style={{fontSize: '20px', margin: 0}}>Title</p>}\ndismissible\ncss={{backgroundColor: 'black'}}\n>\nLorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae\nblanditiis laborum commodi mollitia officiis minus ipsum totam fuga\nodit, dicta magnam numquam reprehenderit et sequi dignissimos iusto\ndeleniti. Quia, modi\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae\nblanditiis laborum commodi mollitia officiis minus ipsum totam fuga\nodit, dicta magnam numquam reprehenderit et sequi dignissimos iusto\ndeleniti. Quia, modi","placement#Placement":"The Tooltip's placement with respect to its trigger element can be adjusted using the placement prop. See the props table below for a full list of available placement combinations\n<TooltipTrigger placement=\"right\">\n<a href='#'>Hover me</a>\n<Tooltip>\nOpen on the right\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nOpen on the right","offset#Offset":"<TooltipTrigger>\n<a href='#'>Hover me</a>\n<Tooltip>\nThis will shift down.\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nThis will shift down.\n\n\n\n\n<TooltipTrigger>\n<a href='#'>Hover me</a>\n<Tooltip>\nThis will shift over to the right.\n</Tooltip>\n</TooltipTrigger>\n\n\n\nHover me\n\n\nThis will shift over to the right.","props#Props":"","tooltiptrigger-props#TooltipTrigger Props:":"Name\tType\tDefault\tDescription\tchildren*\t[ReactElement, ReactElement]\t—\tThe first child must be a trigger, the second child must be Tooltip component\toffset\tnumber\t16\tThe additional offset applied along the main axis between the element and its anchor element.\tcrossOffset\tnumber\t0\tThe additional offset applied along the cross axis between the element and its anchor element.\tdelay\tnumber\t0\tThe delay time for the tooltip to show up\ttrigger\tfocus\t—\tBy default, opens for both focus and hover. Can be made to open only for focus.\topen\tboolean\t—\tWhether the overlay is open by default (controlled)\tdefaultOpen\tboolean\t—\tWhether the overlay is open by default (uncontrolled).\tplacement\tPlacement\tbottom\tThe placement of the element with respect to its anchor element.\tshouldFlip\tboolean\ttrue\tWhether the element should flip its orientation (e.g. top to bottom or left to right) when there is insufficient room for it to render completely.\tonOpenChange\t(isOpen: boolean) => void\t—\tHandler that is called when the overlay's open state changes.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.","placement-prop#Placement Prop":"Name\tType\tDefault\tDescription\tplacement\tbottom | bottom left | bottom right | bottom start | bottom end | top | top left | top right | top start | top end | left | left top | left bottom | start | start top | start bottom | right | right top | right bottom | end | end top | end bottom\t—\tThe placement of the element with respect to its anchor element.","tooltip-props#Tooltip Props":"Name\tType\tDefault\tDescription\tchildren*\tReactNode\t—\t\ttitle\tReactNode | string\t—\tRender tooltip title\tdismissible\tboolean\tfalse\tIf true, show the close icon.\tcss\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/components/wizard":{"title":"Wizard","data":{"":"Using for display stepper","import#Import":"import {Wizard, WizardProps} from '@comfortdelgro/react-compass'\nor\nimport Wizard, {WizardProps} from '@comfortdelgro/react-compass/wizard'\nWe recommend the second method to import components for the benefits of tree shaking.","content#Content":"The TooltipTrigger accepts exactly two children: the element which triggers the display of the Tooltip and the Tooltip itself. The trigger element must be the first child passed into the TooltipTrigger. All content should be internationalized.","basic-usage#Basic usage":"<Wizard items=[\"Step 1\", \"Step 2\", \"Step 3\"] currentStep={1} />","props#Props":"","tooltiptrigger-props#TooltipTrigger Props:":"Name\tType\tDefault\tDescription\titems\tstring[]\t-\tList of display contennt below the stepper\tcurrentStep\tnumber\t1\tCurrent active step, start from 1\tcss?\tCSS\t—\tThe system prop that allows defining system overrides as well as additional CSS styles.\n\nCheck out our ladle for more info on this\ncomponent."}},"/design/colors":{"title":"Colors","data":{"":"Color distinguishes a brand. It is used to convey personality, attracts the eye and indicate change.","palette#Palette":"","primary-colors#Primary Colors":"ComfortDelgro color palette has been created to reflect the spirit of our brand. Blue is used across all our communication as an essential element of branding. Primary color is the color displayed most frequently across your app's screens and components.Black is used primarily for body text and headings, and White is used for screen backgrounds and negative space.\nMain Colors\n\n\n\n\n\n\n\n\n\n\nText Colors\n\n\n\n\n\n\n\n\n\n\n\n\nDividers & Borders","secondary-colors#Secondary Colors":"Secondary color provides more ways to accent and distinguish our product. Each color is selected with purpose in order to provide meaningful feedback within our products. Secondary colors can also be used to create unique secondary brands for each one of ComfortDelgro products.","shades--tints#Shades & Tints":"We intend for tints and shades to be ever evolving, offering an endless palette to choose from. Usage of these colors varies depending on scenarios, but they come in handy for components in our products.\nTheme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverlays\n\n\n\n\n\n\n\n\nGrays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBackgrounds","rules#Rules":"","accessibility#Accessibility":"All our product user interface should meet minimum WCAG AA level contrast guidelines. Low contrast can be problematic for people with lower vision, color blindness or even in non-optimal conditions (outdoor, bright sunlight).","contrast-ratio#Contrast Ratio":"All colors in this section are marked with their contrast ratio against White. If you use these colors on any other background or use these as background with text other than White, you will need to calculate these ratios again.The minimum required contrast ration depends on the text size and weight. To mantain WCAG AA level of contrast ratio, colors are required to be at least 4.5:1 for normal text and 3:1 for large text, and 3:1 for graphics and user interface components (such as form input borders), with exception to text or images of text that are part of an inactive user interface component (disabled states).","rag-red-amber-and-green#RAG (Red, Amber, and Green)":"This palette should only be used to convey status or meaning for messages and feedback. For contexts such as selecting risk, the full RAG palette can be used to reinforce positivity or negativity of the user’s choice."}},"/design/typography":{"title":"Typography","data":{"":"Good typography can help create clear hierarchies, organize information, and guide users through a product or experience.","fonts#Fonts":"Poppin is the primary digital product typeface of Pax app for both iOS and AOS.\nNative OS System feedback will use Roboto for AOS, and SF Sans Pro for IOS.","weights#Weights":"The choice of font weight is also based on the principles of order, stability, and restraint. In most cases, just regular and bold should be enough.","sizes#Sizes":"","display#Display":"","header#Header":"","body#Body":"You can use semibold and bold font weights on these font sizes for emphasises.","labels#Labels":"You can use light, medium and semibold font weights on these font sizes for emphasises.","links#Links":"See Link component reference."}}}